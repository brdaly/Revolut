import pandas
import webbrowser
import os

# Read the dataset into a data table using Pandas
from sklearn import ensemble
from sklearn.externals import joblib
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split

data_table = pandas.read_csv("doc_reports.csv")

# Remove fields we do not want to  include:
del data_table['properties']
del data_table['attempt_id']
del data_table ['user_id']

# Replace categorical data with one-hot encoded data
features_data_table = pandas.get_dummies(data_table, columns=['face_comparison_result','facial_image_integrity_result'])

# Remove status
# del features_data_table['results']

# Create the x and y array
X = features_data_table.as_matrix()
y = data_table['results'].as_matrix()

# Split the data set in a training set (70%) and a test set (30%)
X_train, X_test, y_train, y_test =train_test_split(X, y, test_size=0.3, random_state=0)

# Fit regression model
model = ensemble.GradientBoostingRegressor(
    n_estimators=1000,
    learning_rate=0.1,
    min_samples_leaf=9,
    max_depth=6,
    max_features=0.1,
    loss='huber',
    random_state=0
)
model.fit(X_train, y_train)

# Save the trained model to a file so we can use it in other programs
joblib.dump(model, 'trained_classifier_model.pkl')

# Find the error rate on the training set
mse = mean_absolute_error(y_train, model.predict(X_train))
print("Training Set Mean Absolute Error: %.4f" % mse)

# Find the error rate on the test set
mse = mean_absolute_error(y_test, model.predict(X_test))
print("Test Set Mean Absolute Error: %.4f" % mse)

# Create a web page view of the data for easy viewing
html = features_data_table[''].to_html()

# Save the html to a temporary file
with open("data.html", "w") as f:
    f.write(html)

# Open the web page in our web browser
full_filename = os.path.abspath("data.html")
webbrowser.open("file://{}".format(full_filename))
